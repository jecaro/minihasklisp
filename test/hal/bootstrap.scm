(define (<- a b) (cond ((> a b) #f)
                       ((eq? a b) #f)
                       (#t #t)
                       )
  )
(define (<=- a b) (cond ((> a b) #f)
                        (#t #t)
                        )
  )
(define (>=- a b) (cond ((<- a b) #f)
                        (#t #t)
                        )
  )
(define (abs- a) (cond ((<- a 0) (- a))
                       (#t a)
                       )
  )

(define (not- a) (cond (a #f)
                       (#t #t)
                       )
  )
(define (or- a b) (cond (a #t)
                        (b #t)
                        (#t #f)
                        )
  )
(define (and- a b) (cond ((not- a) #f)
                         ((not- b) #f)
                         (#t #t)
                         )
  )

(define (null?- l) (cond ((eq? l '()) #t)
                         (#t #f)
                         )
  )
(define (length- l) (cond ((null?- l) 0)
                          (#t (+ 1 (length- (cdr l))))
                          )
  )
(define (appendOne- l x) (cond ((null?- l) (cons x '()))
                               (#t (cons (car l) (appendOne- (cdr l) x)))
                               )
  )
(define (append- l1 l2) (cond ((null?- l2) l1)
                              (#t (append- (appendOne- l1 (car l2)) (cdr l2)))
                              )
  )
(define (reverse- l) (cond ((null?- l) l)
                           (#t (appendOne- (reverse- (cdr l)) (car l)))
                           )
  )

(define (map- f l) (cond ((eq? l '()) l)
                         (#t (cons (f (car l)) (map- f (cdr l))))
                         )
  )
(define (filter- f l) (cond ((eq? l '()) l)
                            ((f (car l)) (cons (car l) (filter- f (cdr l))))
                            (#t (filter- f (cdr l)))
                            )
  )
(define (fold-left- f a l) (cond ((eq? l '()) a)
                            (#t (fold-left- f (f a (car l)) (cdr l)))
                            )
  )
(define (fold-right- f a l) (cond ((eq? l '()) a)
                            ; (#t f (fold-right- f a (cdr l)) (car l))
                            (#t (fold-right- f (f (car l) a) (cdr l)))
                            )
  )
